# Your workflow name.
name: Deploy to heroku.

# Run workflow on every push to master branch.
on:
  push:
    branches: [develop]
    

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Your workflows jobs.
jobs:

  eslint:
    runs-on: ubuntu-latest
    name: ESLint
    strategy:
      matrix:
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install modules
      working-directory: ./frontend
      run: npm install
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint .
      continue-on-error: true

  jstest:
    runs-on: ubuntu-latest
    needs: eslint
    name: Code coverage
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: install packages
        working-directory: ./frontend
        run: npm install
      - name: Code coverage
        working-directory: ./frontend
        continue-on-error: true
        run: npm test -- --coverage
      - name: Build project
        working-directory: ./frontend
        continue-on-error: true
        run: npm run build
      - uses: actions/upload-artifact@v2
        name: Upload production-ready build files
        continue-on-error: true
        with:
          name: production-files
          path: ./frontend/build
        


  build:
    name: Heroku build
    needs: jstest
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository.
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

      - name: Checkout
        uses: actions/checkout@v2


      ### ⬇ IMPORTANT PART ⬇ ###

      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}

          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}

          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./frontend/

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web



### ⬆ IMPORTANT PART ⬆ ###
